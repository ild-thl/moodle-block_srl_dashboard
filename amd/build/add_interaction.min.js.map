{"version":3,"file":"add_interaction.min.js","sources":["../src/add_interaction.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Adds interactivity to view-templates and the main-template\n *\n * @module      block_disealytics/add_interaction\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport Ajax from 'core/ajax';\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport Templates from 'core/templates';\nimport {get_string as getString} from 'core/str';\nimport {\n    getVersionInfo,\n    allViewsEnabled,\n    anyViewsEnabled,\n    getCourseId,\n    getViewlist,\n    setScrollTo,\n    setScrollToElement,\n    setViewlist,\n    updateViewlist\n} from 'block_disealytics/view_selection';\nimport {updateView} from 'block_disealytics/update_view';\n\nlet theDisealyticsAddModal = null;\nlet theDisealyticsRemoveModal = null;\nlet theDisealyticsInfoModal = null;\nlet theDisealyticsConfigModal = null;\nlet theDisealyticsConfigConsentModal = null;\n\n/**\n * Initializes the view functionality with the specified viewname.\n * Calls registerEventListener.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nexport const init = (viewname) => {\n    registerEventListener(viewname);\n    if (!anyViewsEnabled()) {\n        const infoOnViews = document.querySelector('.show-when-no-view-enabled');\n        if (infoOnViews) {\n            // Remove the 'hidden' class to show the message.\n            infoOnViews.classList.remove('hidden');\n        }\n    }\n};\n\n/**\n * Sets up the editing mode functionality.\n * Adds event listeners to the toggle button, drag and drop functionality,\n * and add view buttons for each view in the editing mode.\n * When the toggle button is clicked, it triggers the \"editing\" mode update,\n * and sets up drag and drop functionality for view reordering.\n * When add view button is clicked, it adds the view to the dashboard and saves the updated view list.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @function\n * @returns {void}\n */\nexport const setEditingMode = () => {\n    const exitEditing = document.querySelector('#block_disealytics_main_exit-edit_button');\n    if (exitEditing) {\n        exitEditing.addEventListener(\"click\", function() {\n            updateSetting('toggle', 'editing');\n        });\n    }\n    const toggleButton = document.querySelector('.block_disealytics-toggle-editing');\n    if (toggleButton) {\n        toggleButton.addEventListener(\"click\", function() {\n            const noViewsParagraph = document.querySelector('.show-when-no-view-enabled');\n            if (!(noViewsParagraph.classList.contains('hidden'))) {\n                noViewsParagraph.classList.add('hidden');\n            }\n            updateSetting('toggle', 'editing');\n            // Drag and Drop.\n            const dropContainer = document.querySelector(\".block_disealytics-drop-container\");\n            getViewlist().forEach(({viewname}) => {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                // Set up drag and drop functionality.\n                viewContainer.addEventListener(\"dragstart\", () => {\n                    viewContainer.classList.add(\"dragging\");\n                });\n                viewContainer.addEventListener(\"dragend\", () => {\n                    viewContainer.classList.remove(\"dragging\");\n                    // Save the new order in the database.\n                    const allViewsContainer = document.querySelector(\".block_disealytics-all-views-container\");\n                    const viewElements = [...allViewsContainer.children];\n                    const updatedViews = [];\n                    viewElements.forEach(viewElement => {\n                        const viewname = viewElement.id.replace(/^block_disealytics-/, '');\n                        if (viewElement.textContent.trim() !== '') {\n                            const newView = {viewname: viewname, enabled: 1};\n                            updatedViews.push(newView);\n                        } else {\n                            const newView = {viewname: viewname, enabled: 0};\n                            updatedViews.push(newView);\n                        }\n                    });\n                    updateSetting('write', 'views', JSON.stringify(updatedViews));\n                });\n                // Show/Hide edit-buttons on views.\n                const editBtn = document.querySelector('.edit-button-' + viewname);\n                if (editBtn) {\n                    if (!editBtn.classList.contains('hidden')) {\n                        editBtn.classList.add('hidden');\n                    } else {\n                        editBtn.classList.remove('hidden');\n                    }\n                }\n            });\n            dropContainer.addEventListener(\"dragover\", (e) => {\n                e.preventDefault();\n                const draggingElement = dropContainer.querySelector('.dragging');\n                const afterElement = getDragAfterElementByGrid(dropContainer, e.clientX, e.clientY);\n\n                if (afterElement && afterElement !== draggingElement) {\n                    dropContainer.insertBefore(draggingElement, afterElement);\n                } else {\n                    dropContainer.appendChild(draggingElement);\n                }\n            });\n\n            // Add view button.\n            const addViewButton = document.querySelector('#block_disealytics-open-add-modal');\n            if (addViewButton && addViewButton.dataset.listenerAttached !== 'true') {\n                addViewButton.addEventListener(\"click\", async function() {\n                    try {\n                        if (theDisealyticsAddModal) {\n                            theDisealyticsAddModal.destroy();\n                        }\n                        theDisealyticsAddModal = await ModalFactory.create({\n                            title: await getString('main_add_view_title', 'block_disealytics'),\n                            body: await Templates.render('block_disealytics/addview_modal', {id: 6}),\n                            footer: getVersionInfo(),\n                            removeOnClose: true\n                        });\n                        await theDisealyticsAddModal.show();\n\n                        const allViews = document.querySelector('.show-when-all-views-enabled');\n                        const anyViewSelectable = document.querySelector('.show-when-any-view-selectable');\n\n                        if (allViewsEnabled()) {\n                            anyViewSelectable.classList.add('hidden');\n                            allViews.classList.remove('hidden');\n                        } else {\n                            anyViewSelectable.classList.remove('hidden');\n                            allViews.classList.add('hidden');\n                        }\n\n                        // Add EventListeners to the Buttons.\n                        getViewlist().forEach(({viewname, enabled}) => {\n                            const addButton = document.querySelector('.block_disealytics-add-' + viewname);\n                            const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                            if (addButton) {\n                                if (!enabled) {\n                                    addButton.classList.remove('hidden');\n                                }\n                                addButton.addEventListener(\"click\", async function() {\n                                    addButton.classList.add('hidden');\n                                    viewContainer.parentElement.append(viewContainer);\n                                    viewContainer.setAttribute('data-visible', 'true');\n                                    setScrollToElement('block_disealytics-' + viewname);\n                                    setScrollTo(true);\n                                    const updatedViewList = updateViewlist(viewname, 'add');\n                                    await updateSetting('write', 'views', JSON.stringify(updatedViewList));\n                                    // This handles the information given to the user, when all views are used or not.\n                                    for (const view of updatedViewList) {\n                                        if (view.enabled === 0) {\n                                            allViews.classList.add('hidden');\n                                            anyViewSelectable.classList.remove('hidden');\n                                            break;\n                                        } else {\n                                            allViews.classList.remove('hidden');\n                                            anyViewSelectable.classList.add('hidden');\n                                        }\n                                    }\n                                }, true);\n                            }\n                        });\n                        // Mark the event listener as attached.\n                        addViewButton.dataset.listenerAttached = 'true';\n                    } catch (error) {\n                        window.console.error(\"Failed to open the add view modal:\", error);\n                    }\n                });\n            }\n        }, true);\n    }\n};\n\n/**\n * Get the grid position of the mouse pointer relative to the container.\n * @param {HTMLElement} container - the container element\n * @param {number} x - mouse x position\n * @param {number} y - mouse y position\n * @returns {{row: number, col: number}|null}\n */\nconst getGridPosition = (container, x, y) => {\n    const containerRect = container.getBoundingClientRect();\n    const gridGap = 8;\n    const colCount = 2;\n\n    // Calculate available width per cell.\n    // Total gap width between columns is gridGap * (colCount - 1)\n    const totalGapWidth = gridGap * (colCount - 1);\n    const cellWidth = (containerRect.width - totalGapWidth) / colCount;\n\n    // Calculate mouse position relative to the container\n    const relX = x - containerRect.left;\n    const relY = y - containerRect.top;\n\n    // Determine the column (clamp in case of slight overflows)\n    let col = Math.floor(relX / (cellWidth + gridGap));\n    if (col < 0) {\n        col = 0;\n    }\n    if (col > colCount - 1) {\n        col = colCount - 1;\n    }\n\n    // For row, we assume all items have the same height.\n    const firstItem = container.querySelector('.draggable');\n    if (!firstItem) {\n        return null;\n    }\n    const itemRect = firstItem.getBoundingClientRect();\n    const cellHeight = itemRect.height + gridGap;\n    let row = Math.floor(relY / cellHeight);\n\n    return {row, col};\n};\n\n/**\n * Get the element after which the dragged element should be placed.\n * @param {HTMLElement} container - the container element\n * @param {number} x - mouse x position\n * @param {number} y - mouse y position\n * @returns {*|null}\n */\nconst getDragAfterElementByGrid = (container, x, y) => {\n    const pos = getGridPosition(container, x, y);\n    if (!pos) {\n        return null;\n    }\n    const {row, col} = pos;\n\n    // Get only visible draggable elements\n    const draggables = [...container.querySelectorAll('.draggable:not(.dragging)[data-visible=\"true\"]')];\n\n    // Compute target index based on grid coordinates\n    let targetIndex = row * 2 + col;\n\n    if (targetIndex === draggables.length || targetIndex > draggables.length) {\n        return null;\n    }\n\n    return draggables[targetIndex];\n};\n\n\n/**\n * Registers event listeners (for a single view) that change the user preferences.\n *\n * @param {string} viewname - The viewname in the format of 'viewname-view'.\n * @returns {void}\n */\nconst registerEventListener = (viewname) => {\n    // Verify deletion modal.\n    const verifyDeletionButton = document.querySelector('.block_disealytics_remove_modal_' + viewname);\n    if (verifyDeletionButton) {\n        verifyDeletionButton.addEventListener(\"click\", async function() {\n            // Fetch necessary strings.\n            const modalRemoveText1 = await getString('modal_remove_text_1', 'block_disealytics');\n            const modalRemoveView = await getString(viewname, 'block_disealytics');\n            const modalRemoveText2 = await getString('modal_remove_text_2', 'block_disealytics');\n\n            if (theDisealyticsRemoveModal) {\n                theDisealyticsRemoveModal.destroy();\n            }\n            // Create the remove modal\n            theDisealyticsRemoveModal = await ModalFactory.create({\n                type: ModalFactory.types.SAVE_CANCEL,\n                title: await getString('modal_remove_title', 'block_disealytics'),\n                body: `${modalRemoveText1} <strong>${modalRemoveView}</strong> ${modalRemoveText2}`,\n                removeOnClose: true,\n            });\n            theDisealyticsRemoveModal.setSaveButtonText(await getString('modal_remove_check', 'block_disealytics'));\n            const saveBtn = theDisealyticsRemoveModal.getRoot().find(theDisealyticsRemoveModal.getActionSelector('save'));\n            if (saveBtn) {\n                saveBtn.removeClass('btn-primary');\n                saveBtn.addClass('btn-danger');\n            }\n            const cancelBtn = theDisealyticsRemoveModal.getFooter().find(theDisealyticsRemoveModal.getActionSelector('cancel'));\n            if (cancelBtn) {\n                cancelBtn.css('display', 'none');\n            }\n            theDisealyticsRemoveModal.show();\n            theDisealyticsRemoveModal.getRoot().on(ModalEvents.save, async function() {\n                const viewContainer = document.querySelector('#block_disealytics-' + viewname);\n                viewContainer.setAttribute('data-visible', 'false');\n                const updatedViewList = updateViewlist(viewname, 'delete');\n                await updateSetting('write', 'views', JSON.stringify(updatedViewList));\n            });\n        }, false);\n    }\n\n    // Toggle expansion.\n    const toggleExpansionButtons = document.querySelectorAll('.block_disealytics-toggle-expansion-btn-' + viewname);\n    [].forEach.call(toggleExpansionButtons, (e) => {\n        e.addEventListener(\"click\", function() {\n            setScrollTo(true);\n            updateSetting(\"write\", 'expanded_view', viewname);\n        }, false);\n    });\n    toggleInformationModal(viewname);\n    setCourseCategory(viewname);\n    toggleViewmodeAccordion(viewname);\n};\n\n/**\n * Generates the information modal.\n *\n * Is called in the javascript of the main.mustache template and in the registerEventListener function.\n *\n * @param {String} viewname - The button element that triggers the modal.\n * @returns {void}\n */\nexport const toggleInformationModal = (viewname) => {\n    const btn = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn\");\n    const btnExpanded = document.querySelector(\"#block_disealytics_\" + viewname + \"_info_btn_expanded\");\n\n    if (btn) {\n        btn.addEventListener('click', async function() {\n            const footerContent = viewname === 'main' ?\n                '<div>' + getVersionInfo() + '</div>' :\n                '';\n\n            if (theDisealyticsInfoModal) {\n                theDisealyticsInfoModal.destroy();\n            }\n\n            theDisealyticsInfoModal = await ModalFactory.create({\n                title: viewname === 'main' ?\n                    await getString('main_help_title', 'block_disealytics') :\n                    await getString(viewname, 'block_disealytics'),\n                body: viewname === 'main' ?\n                    await Templates.render('block_disealytics/help_modal', {id: 5}) :\n                    await getString(viewname + '_help_info_text', 'block_disealytics'),\n                footer: footerContent,\n                removeOnClose: true\n            });\n\n            await theDisealyticsInfoModal.show();\n\n            if (viewname === 'main') {\n                initHelpModalAccordion();\n            }\n        });\n    }\n\n    if (btnExpanded) {\n        btnExpanded.addEventListener('click', async function() {\n            const modal = await ModalFactory.create({\n                title: getString(viewname, 'block_disealytics'),\n                body: getString(viewname + '_help_info_text_expanded', 'block_disealytics'),\n                removeOnClose: true\n            });\n            modal.show();\n        });\n    }\n};\n\n/**\n * Generates the main config modal.\n *\n * Is called in the javascript of the main.mustache template.\n *\n * @returns {void}\n */\nexport const toggleMainConfigModal = () => {\n    const mainConfigBtn = document.querySelector(\"#block_disealytics_config_menu\");\n    if (mainConfigBtn) {\n        mainConfigBtn.addEventListener('click', async function() {\n            if (theDisealyticsConfigModal) {\n                theDisealyticsConfigModal.destroy();\n            }\n            // Create the main config modal with custom content.\n            theDisealyticsConfigModal = await ModalFactory.create({\n                title: await getString('main_config_title', 'block_disealytics'),\n                body: await Templates.render('block_disealytics/config_menu', {id: 1}),\n                removeOnClose: true\n            });\n\n            // Show the modal.\n            await theDisealyticsConfigModal.show();\n\n            // Wait until the modal content is fully shown.\n            if (theDisealyticsConfigModal.getRoot()) {\n                const mainConsentBtn = document.querySelector(\"#block_disealytics_config_consent_menu\");\n                if (mainConsentBtn) {\n                    const toggleIcon = mainConsentBtn.querySelector('i');\n\n                    mainConsentBtn.addEventListener('click', async function() {\n                        // Toggle icon classes.\n                        toggleIcon.classList.remove('disea-green', 'fa-toggle-on');\n                        toggleIcon.classList.add('disea-gray', 'fa-toggle-off');\n\n                        // Set a timeout to change the classes back after 1 second.\n                        setTimeout(() => {\n                            toggleIcon.classList.remove('disea-gray', 'fa-toggle-off');\n                            toggleIcon.classList.add('disea-green', 'fa-toggle-on');\n                        }, 1000);\n                        if (theDisealyticsConfigConsentModal) {\n                            theDisealyticsConfigConsentModal.destroy();\n                        }\n                        // Create and show the consent modal.\n                        theDisealyticsConfigConsentModal = await ModalFactory.create({\n                            title: await getString('consent_config_title', 'block_disealytics'),\n                            body: await Templates.render('block_disealytics/config_menu_consent', {id: 2}),\n                            removeOnClose: true\n                        });\n\n                        await theDisealyticsConfigConsentModal.show();\n\n                        // Initialize consent buttons after the consent modal is shown.\n                        enableConsentButtons(theDisealyticsConfigConsentModal);\n                    });\n                }\n            }\n        });\n    }\n};\n\nexport const initHelpModalAccordion = () => {\n    // Attach click event to each accordion head.\n    const accordion = document.getElementById('block_disealytics_info-modal-accordion');\n    const accordionHeads = document.querySelectorAll('#block_disealytics_info-modal-accordion .accordion-head');\n    accordionHeads.forEach((head, index) => {\n        head.addEventListener('click', () => {\n            toggleAccordion(accordion, index + 1);\n        });\n    });\n};\n\n/**\n * Toggles the visibility of an accordion content section and updates the toggle icon.\n *\n * @param {HTMLElement} element - The head element that surrounds the toggle function.\n * @param {number} index - The index of the accordion section to toggle.\n * @returns {void}\n */\nexport const toggleAccordion = (element, index) => {\n    const content = element.querySelector(`#content-${index}`);\n    const icon = element.querySelector(`#icon-${index}`);\n\n    if (content.classList.contains('active')) {\n        // Fold the content if it's open.\n        content.classList.remove('active');\n        icon.className = \"fa fa-chevron-down accordion-icon\";\n    } else {\n        // Unfold the content if it's closed.\n        content.classList.add('active');\n        icon.className = \"fa fa-chevron-up accordion-icon\";\n    }\n};\n\n/**\n * Retrieves the trimmed value of an HTML element by its ID.\n *\n * @function\n * @name getValueById\n * @param {string} id - The ID of the HTML element.\n * @returns {string} - The trimmed value of the specified element.\n */\nexport function getValueById(id) {\n    return document.getElementById(id).value.trim();\n}\n\n/**\n * Makes an AJAX call to change a user preference, then calls a view update.\n *\n * @param {string} updatetype - The type of update to perform (set, toggle, expand).\n * @param {string} setting - Determines which and how a user preference should be changed.\n * @param {string} val tmp.\n * @returns {void}\n */\nexport const updateSetting = (updatetype, setting, val = undefined) => {\n    let args = {\n        info: {\n            action: updatetype,\n            name: setting,\n        }\n    };\n    if (val !== undefined) {\n        args.info.value = val;\n    }\n    Ajax.call([{\n        methodname: 'block_disealytics_write_user_preference',\n        args,\n    }\n    ])[0].done(async function(response) {\n        if (setting === 'viewmode' || setting === 'editing') {\n            let views = getViewlist().filter((e) => e.enabled === 1).map((e) => e.viewname);\n            await updateView(getCourseId(), views);\n        } else {\n            if (setting === 'views') {\n                const data = JSON.parse(response);\n                setViewlist(JSON.parse(data.setting));\n                await updateView(getCourseId(), getViewlist());\n            } else if (setting === 'expanded_view') {\n                await updateView(getCourseId(), [val]);\n            } else {\n                await updateView(getCourseId(), undefined);\n            }\n        }\n        if (updatetype === 'select_category') {\n            await updateView(getCourseId(), [setting]);\n        }\n        if (updatetype === \"revoke_consent\") {\n            location.reload();\n        }\n    }).fail(function(err) {\n        window.console.log(err);\n    });\n};\n\n/**\n * Adds an EventListener to the viewmode dropdown.\n *\n * @returns {void}\n */\nexport const enableViewmodeDropdown = () => {\n    document.querySelector(\".main-viewmode-selection\").addEventListener(\"change\", function() {\n        let select = document.querySelector(\".main-viewmode-selection\");\n        const viewmodeLabel = document.querySelector(\".main-viewmode-label\");\n        if (viewmodeLabel) {\n            updateSetting(\"write\", 'viewmode', select.value);\n        }\n    });\n};\n\n/**\n * Adds an EventListener to the consent buttons.\n *\n * @param {object} modal - The modal to enable the buttons for.\n * @returns {void}\n */\nexport const enableConsentButtons = (modal = null) => {\n    document.querySelector(\".disea-delete-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', \"delete\");\n    });\n    document.querySelector(\".disea-save-consent-btn\").addEventListener(\"click\", function() {\n        updateSetting(\"revoke_consent\", '', '');\n    });\n    document.querySelector(\".disea-cancel-consent-btn\").addEventListener(\"click\", function() {\n        modal.destroy();\n    });\n};\n\nexport const setCourseCategory = (viewname) => {\n    const courseCategories = document.querySelectorAll(\".course-category-global-item-\" + viewname);\n\n    courseCategories.forEach(category => {\n        category.addEventListener(\"click\", function() {\n            const selectedCategory = this.textContent.trim();\n            updateSetting(\"select_category\", viewname, selectedCategory);\n        });\n    });\n};\n\nexport const toggleViewmodeAccordion = (viewname) => {\n    const accordionIcons = document.querySelectorAll('.course-category-icon-' + viewname);\n\n    accordionIcons.forEach(icon => {\n        if (icon) {\n            const container = icon.closest('.accordion-head-course-category-' + viewname);\n            if (container) {\n                icon.addEventListener('click', (event) => {\n                    event.stopPropagation(); // Prevent the click from reaching the container\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n                container.addEventListener('click', () => {\n                    // Handle the click on the container (excluding the icon)\n                    icon.classList.toggle('fa-chevron-down');\n                    icon.classList.toggle('fa-chevron-up');\n\n                    const panelBody = container.nextElementSibling;\n                    panelBody.classList.toggle('hidden');\n                });\n            }\n        }\n    });\n};\n"],"names":["id","document","getElementById","value","trim","theDisealyticsAddModal","theDisealyticsRemoveModal","theDisealyticsInfoModal","theDisealyticsConfigModal","theDisealyticsConfigConsentModal","viewname","registerEventListener","infoOnViews","querySelector","classList","remove","exitEditing","addEventListener","updateSetting","toggleButton","noViewsParagraph","contains","add","dropContainer","forEach","_ref","viewContainer","viewElements","children","updatedViews","viewElement","replace","textContent","newView","enabled","push","JSON","stringify","editBtn","e","preventDefault","draggingElement","afterElement","getDragAfterElementByGrid","clientX","clientY","insertBefore","appendChild","addViewButton","dataset","listenerAttached","async","destroy","ModalFactory","create","title","body","Templates","render","footer","removeOnClose","show","allViews","anyViewSelectable","_ref2","addButton","parentElement","append","setAttribute","updatedViewList","view","error","window","console","container","x","y","pos","containerRect","getBoundingClientRect","cellWidth","width","gridGap","relX","left","relY","top","col","Math","floor","colCount","firstItem","cellHeight","height","row","getGridPosition","draggables","querySelectorAll","targetIndex","length","verifyDeletionButton","modalRemoveText1","modalRemoveView","modalRemoveText2","type","types","SAVE_CANCEL","setSaveButtonText","saveBtn","getRoot","find","getActionSelector","removeClass","addClass","cancelBtn","getFooter","css","on","ModalEvents","save","toggleExpansionButtons","call","toggleInformationModal","setCourseCategory","toggleViewmodeAccordion","btn","btnExpanded","footerContent","initHelpModalAccordion","mainConfigBtn","mainConsentBtn","toggleIcon","setTimeout","enableConsentButtons","accordion","head","index","toggleAccordion","element","content","icon","className","updatetype","setting","val","undefined","args","info","action","name","methodname","done","response","views","filter","map","data","parse","location","reload","fail","err","log","select","modal","category","selectedCategory","this","closest","event","stopPropagation","toggle","nextElementSibling"],"mappings":"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"}